// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

RWStructuredBuffer<float> node_pos;
RWStructuredBuffer<float> node_vel;
RWStructuredBuffer<float> node_n;
RWByteAddressBuffer node_force;
RWByteAddressBuffer node_normal;
float dt;
float mass;

[numthreads(12,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    int idx = (int)(id.x / 3) * 3;
    float nx = asfloat(node_normal.Load4(idx * 4 + 0));
    float ny = asfloat(node_normal.Load4(idx * 4 + 4));
    float nz = asfloat(node_normal.Load4(idx * 4 + 8));
    float nme = asfloat(node_normal.Load4(id.x * 4));
    float3 norm = sqrt(nx * nx + ny * ny + nz * nz);
    float force =  asfloat(node_force.Load4(id.x * 4));
    node_vel[id.x] += force / mass * dt;
    if(id.x % 3 == 1)
        node_force.Store4(id.x * 4, -0.8);
    //if (id.x >= 6)
   //     return;
    node_pos[id.x] += dt * force;
    node_n[id.x] = nme / norm;
    
    node_force.Store4(id.x * 4, 0);
    node_normal.Store4(id.x * 4, 0);
}
